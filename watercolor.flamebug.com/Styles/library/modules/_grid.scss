//
// Insert the given content within a media query given the breakpoint size (extra-small, small, medium, large, extra-large)
//

@mixin breakpoint($point) {
	$column-size: $column-width + $gutter-width;
	$small-break: $column-size * 6 + $gutter-width;          // add extra gutter to deal with scrollbars included in viewport width
	$medium-break: $column-size * 8 + $gutter-width;         // add extra gutter to deal with scrollbars included in viewport width
	$large-break: $column-size * 12 + $gutter-width;         // add extra gutter to deal with scrollbars included in viewport width
	$extra-large-break: $column-size * 16 + $gutter-width;   // add extra gutter to deal with scrollbars included in viewport width

	@if $point == small {
		@media screen and (min-width: $small-break) { @content; }
	}
	@else if $point == medium {
		@media screen and (min-width: $medium-break) { @content; }
	}
	@else if $point == large {
		@media screen and (min-width: $large-break)  { @content; }
	}
	@else if $point == extra-large {
		@media screen and (min-width: $extra-large-break)  { @content; }
	}
}

//
// Structural Grid
//

@mixin page-width($cols) {
	width: $cols * ($column-width + $gutter-width);
}

@mixin column($cols) {
	display: inline;
	float: left;
	width: $cols * ($column-width + $gutter-width) - $gutter-width;
	margin-left: $gutter-width / 2;
	margin-right: $gutter-width / 2;
}

@mixin max-column() {
	display: block;
	float: none;
	margin-left: $gutter-width / 2;
	margin-right: $gutter-width / 2;
}

@mixin prefix($cols) {
	margin-left: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);
}

@mixin suffix($cols) {
	margin-right: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);
}

//
// clear-children
//

@mixin clear-children() {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}