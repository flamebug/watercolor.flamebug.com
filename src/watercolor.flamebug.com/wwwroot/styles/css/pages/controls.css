.alert, .alert.success, .alert.error {
  display: none;
  padding: 8px 14px 8px 14px;
  margin-bottom: 20px;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
  background-color: #fcf8e3;
  border: 1px solid #fbeed5;
  border-radius: .25em;
  color: inherit;
}

.show.alert {
  display: block;
}

.alert.success {
  color: #468847;
  background-color: #dff0d8;
  border-color: #d6e9c6;
}

.alert.error {
  color: #b94a48;
  background-color: #f2dede;
  border-color: #eed3d7;
}

.badge, .badge.top-right, .badge.top-left, .badge.bottom-right, .badge.bottom-left {
  display: inline-block;
  overflow: visible;
  padding: 0 0.5em;
  position: absolute;
  top: -12px;
  bottom: auto;
  right: -12px;
  left: auto;
  z-index: 1;
  background-color: #b44;
  border: 2px solid #fff;
  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.05);
  border-radius: 1em;
  color: #FFF !important;
  /* prevent inheriting link colors */
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);
  text-decoration: none;
  font-size: 0.75em;
}

.badge:empty {
  display: none;
}

.badge.top-right {
  position: absolute;
  top: -12px;
  bottom: auto;
  right: -12px;
  left: auto;
}

.badge.top-left {
  position: absolute;
  top: -12px;
  bottom: auto;
  right: auto;
  left: -12px;
}

.badge.bottom-right {
  position: absolute;
  top: auto;
  bottom: -12px;
  right: -12px;
  left: auto;
}

.badge.bottom-left {
  position: absolute;
  top: auto;
  bottom: -12px;
  right: auto;
  left: -12px;
}

.label, .label.primary, .label.positive, .label.warning, .label.negative {
  display: inline-block;
  overflow: visible;
  padding: 0 0.75em;
  background-color: #999;
  border-radius: 0.3em;
  color: #fff;
  text-decoration: none;
}

.label:empty {
  display: none;
}

.label.primary {
  background-color: #2a75d1;
  color: #fff;
}

.label.positive {
  background-color: #0eb249;
  color: #fff;
}

.label.warning {
  background-color: #fb0;
  color: #fff;
}

.label.negative {
  background-color: #b44;
  color: #fff;
}

.tag, .tag.primary, .tag.positive, .tag.warning, .tag.negative {
  display: inline-block;
  overflow: visible;
  padding: 0 0.75em;
  background-color: #999;
  border-radius: 1em;
  color: #fff;
  text-decoration: none;
}

.tag:empty {
  display: none;
}

.tag.primary {
  background-color: #2a75d1;
  color: #fff;
}

.tag.positive {
  background-color: #0eb249;
  color: #fff;
}

.tag.warning {
  background-color: #fb0;
  color: #fff;
}

.tag.negative {
  background-color: #b44;
  color: #fff;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
