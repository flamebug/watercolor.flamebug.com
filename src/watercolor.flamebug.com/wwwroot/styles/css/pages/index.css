#introduction ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-items: stretch;
  align-content: stretch;
}

#introduction ul li {
  flex-basis: auto;
  margin-left: 0.75rem;
  margin-right: 0.75rem;
  flex-grow: 1;
  flex-shrink: 1;
  align-self: auto;
}

#introduction ul li h3 {
  margin-bottom: 0;
}

#introduction ul li p {
  margin-top: 0;
}

@media screen and (min-width: 41.5rem) {
  #introduction ul {
    display: flex;
    flex-direction: row;
  }
}

#tools {
  background-color: #2f383d;
  color: #fff;
}

#tools ul {
  list-style: none;
  margin: 1.625em 0;
  padding: 0;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  align-content: stretch;
  margin-right: -0.75rem;
  margin-left: -0.75rem;
}

#tools ul li {
  position: relative;
  margin-top: 1.625em;
  flex-basis: auto;
  margin-left: 0.75rem;
  margin-right: 0.75rem;
  flex-grow: 1;
  flex-shrink: 1;
  align-self: auto;
}

#tools ul li img {
  width: 6em;
  opacity: .8;
}

@media screen and (min-width: 31.5rem) {
  #tools ul li img {
    width: 5em;
  }
}

@media screen and (min-width: 41.5rem) {
  #tools ul li img {
    width: 6em;
  }
}

@media screen and (min-width: 61.5rem) {
  #tools ul li img {
    width: 7em;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZXMvaW5kZXguY3NzIiwic291cmNlcyI6WyJwYWdlcy9pbmRleC5zY3NzIiwic2l0ZS9fc2V0dGluZ3Muc2NzcyIsInNpdGUvc2V0dGluZ3MvX3RleHQuc2NzcyIsInNpdGUvc2V0dGluZ3MvX3BhbGV0dGUuc2NzcyIsIi4uL2xpYi93YXRlcmNvbG9yL21vZHVsZXMvX2dyaWQuc2NzcyIsIi4uL2xpYi93YXRlcmNvbG9yL2RlZmF1bHRzL19ncmlkLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCBcInNpdGUvc2V0dGluZ3NcIjtcclxuQGltcG9ydCBcIndhdGVyY29sb3IvbW9kdWxlcy9ncmlkXCI7XHJcbiAgIFxyXG4vL1xyXG4vLyBJbnRyb2R1Y3Rpb25cclxuLy9cclxuXHJcbiNpbnRyb2R1Y3Rpb24ge1xyXG4gICAgICAgIFxyXG4gICAgdWwge1xyXG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgQGluY2x1ZGUgZ3JpZCgkdHlwZTogY29sdW1uLCAkd3JhcDogbm8td3JhcCk7XHJcblxyXG4gICAgICAgIGxpIHsgICAgICAgXHJcbiAgICAgICAgICAgIEBpbmNsdWRlIGNvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGgzIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHAge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQobWVkaXVtKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIGdyaWQtdHlwZShyb3cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy9cclxuLy8gVG9vbHNcclxuLy9cclxuXHJcbiN0b29scyB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYzODNkO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBcclxuICAgIHVsIHtcclxuICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgICAgIG1hcmdpbjogJGxpbmUtaGVpZ2h0ICogMWVtIDA7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBAaW5jbHVkZSBncmlkKCRhbGlnbi1pdGVtczogY2VudGVyKTtcclxuXHJcbiAgICAgICAgbGkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6ICRsaW5lLWhlaWdodCAqIDFlbTtcclxuICAgICAgICAgICAgQGluY2x1ZGUgY29sdW1uO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiA2ZW07XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAuODtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgYnJlYWtwb2ludChzbWFsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA1ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQobWVkaXVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDZlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgYnJlYWtwb2ludChsYXJnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA3ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvL1xyXG4vLyBTZXR0aW5nc1xyXG4vL1xyXG5cclxuQGltcG9ydCBcInNldHRpbmdzL3RleHRcIjtcclxuQGltcG9ydCBcInNldHRpbmdzL3BhbGV0dGVcIjsiLCIvL1xyXG4vLyBUeXBvZ3JhcGh5XHJcbi8vXHJcblxyXG4kYm9keS1mb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XHJcbiRib2R5LWZvbnQtd2VpZ2h0OiAzMDAgIWRlZmF1bHQ7XHJcblxyXG4kaGVhZGVyLWZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcclxuJGhlYWRlci1mb250LXdlaWdodDogNTAwICFkZWZhdWx0OyIsIi8vXHJcbi8vIFBhbGV0dGVcclxuLy9cclxuXHJcbiRwcmltYXJ5LWNvbG9yOiAjZWE5NDYyO1xyXG4kc2Vjb25kYXJ5LWNvbG9yOiAjOGNiZmRlOyIsIi8vLy9cbi8vL1xuLy8vIEdyaWQgcmVsYXRlZCBtaXhpbnMgdG8gaGVscCBzdHlsZSB0aGUgZ3JpZCBjb250YWluZXIsIGNvbHVtbnMsIGFuZCB0ZXh0XG4vLy9cbi8vLyBAZ3JvdXAgZ3JpZFxuLy8vIEBhdXRob3IgQ2xpbnQgS29sb2R6aWVqXG4vLy9cbi8vLy9cblxuQGltcG9ydCBcIi4uL2RlZmF1bHRzL2dyaWRcIjtcblxuLy8vXG4vLy8gQnVpbGQgdGhlIGNvbnRhaW5lciBiYXNlZCBvbiB0aGUgYnJlYWtwb2ludCBzZXR0aW5ncyAoZGVmYXVsdCBicmVha3BvaW50cyBhcmU6IGRlZmF1bHQsIHNtYWxsLCBtZWRpdW0sIGxhcmdlLCBleHRyYS1sYXJnZSlcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdC5jb250YWluZXIge1xuLy8vXHRcdFx0QGluY2x1ZGUgY29udGFpbmVyO1xuLy8vXHRcdH1cbi8vL1xuXG5AbWl4aW4gY29udGFpbmVyKCkge1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtYXJnaW46IDAgYXV0bztcblx0cGFkZGluZy1yaWdodDogJGd1dHRlci13aWR0aCAqIDAuNTtcblx0cGFkZGluZy1sZWZ0OiAkZ3V0dGVyLXdpZHRoICogMC41O1xuXHRcblx0QGVhY2ggJHNpemUsICRjb2xzIGluICRicmVha3BvaW50cyB7XG5cdFx0XHRcdFxuXHRcdEBpZiAkc2l6ZSA9PSBkZWZhdWx0IHtcblx0XHRcdHdpZHRoOiAkY29scyAqICgkY29sdW1uLXdpZHRoICsgJGd1dHRlci13aWR0aCk7XG5cdFx0fVxuXHRcdEBlbHNlIHtcblx0XHRcdEBpbmNsdWRlIGJyZWFrcG9pbnQoJHNpemUpIHtcblx0XHRcdFx0d2lkdGg6ICRjb2xzICogKCRjb2x1bW4td2lkdGggKyAkZ3V0dGVyLXdpZHRoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cdFxufVxuXG4vLy9cbi8vLyBJbnNlcnQgdGhlIGdpdmVuIGNvbnRlbnQgd2l0aGluIGEgbWVkaWEgcXVlcnkgZ2l2ZW4gdGhlIGJyZWFrcG9pbnQgc2l6ZVxuLy8vXG4vLy8gQHBhcmFtZXRlciB7bnVtYmVyfSAkcG9pbnQgLSBUaGUgYnJlYWtwb2ludCB0aGF0IHRoZSBjb250ZW50IHNob3VsZCBiZSBhcHBsaWVkIHRvLiBWYWx1ZXM6IGBkZWZhdWx0YCwgYHNtYWxsYCwgYG1lZGl1bWAsIGBsYXJnZWAsIGBleHRyYS1sYXJnZWAgKGlmIHVzaW5nIGdyaWQgZGVmYXVsdHMpXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRkaXYge1xuLy8vXHRcdFx0QGluY2x1ZGUgYnJlYWtwb2ludChsYXJnZSkge1xuLy8vXHRcdFx0XHRjb2xvcjogcmVkO1xuLy8vXHRcdFx0fVxuLy8vXHRcdH1cbi8vL1xuXG5AbWl4aW4gYnJlYWtwb2ludCgkcG9pbnQpIHtcblx0JGJyZWFrOiAoJGNvbHVtbi13aWR0aCArICRndXR0ZXItd2lkdGgpICogbWFwLWdldCgkYnJlYWtwb2ludHMsICRwb2ludCkgKyAkZ3V0dGVyLXdpZHRoO1xuXHRcblx0QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJGJyZWFrKSB7XG5cdFx0QGNvbnRlbnQ7XG5cdH1cbn1cblxuLy8vXG4vLy8gU2V0IHRoZSBlbGVtZW50IGFzIGEgZ3JpZCBjb250YWluZXIgd2l0aCBnaXZlbiB0eXBlLCBkaXJlY3Rpb24sIG1hcmdpbi1hZGp1c3RtZW50LCB3cmFwcGluZywganVzdGlmaWNhdGlvbiwgYW5kIGFsaWdubWVudFxuLy8vXG4vLy8gQHBhcmFtZXRlciB7c3RyaW5nfSAkdHlwZSBbcm93XSAtIFR5cGUgb2YgZ3JpZC4gVmFsdWVzOiBgcm93YCwgYGNvbHVtbmBcbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICRkaXJlY3Rpb24gW2ZvcndhcmRdIC0gRGlyZWN0aW9uIHRoYXQgdGhlIGdyaWQgaXRlbXMgc2hvdWxkIGZvbGxvdy4gVmFsdWVzOiBgZm9yd2FyZGAsIGByZXZlcnNlYFxuLy8vIEBwYXJhbWV0ZXIge3N0cmluZ30gJHdyYXAgW3dyYXBdIC0gU2hvdWxkIHRoZSBjb250ZW50IGJlIHdyYXBwZWQgb3Igbm90LiBWYWx1ZXM6IGB3cmFwYCwgYG5vLXdyYXBgLCBgcmV2ZXJzZWBcbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICRqdXN0aWZ5IFtzdGFydF0gLSBIb3cgdG8ganVzdGlmeSB0aGUgY29sdW1ucyB3aXRoaW4gdGhlIGF2YWlsYWJsZSBzcGFjZS4gVmFsdWVzOiBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiZXR3ZWVuYCwgYGFyb3VuZGBcbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICRhbGlnbi1pdGVtcyBbc3RyZXRjaF0gLSBBbGlnbm1lbnQgbWV0aG9kIGZvciBjaGlsZCBjb2x1bW5zIG9uIHRoZSBjcm9zcyBheGlzIChiYXNpY2FsbHkgdmVydGljYWwgYWxpZ24gZm9yIGNoaWxkIGNvbHVtbnMpLiBWYWx1ZXM6IGBzdHJldGNoYCwgYHN0YXJ0YCwgYGVuZGAsIGBjZW50ZXJgLCBgYmFzZWxpbmVgXG4vLy8gQHBhcmFtZXRlciB7c3RyaW5nfSAkYWxpZ24tY29udGVudCBbc3RyZXRjaF0gLSBBbGlnbm1lbnQgbWV0aG9kIGZvciB0aGUgZ3JpZCBjb250ZW50IG9uIHRoZSBjcm9zcyBheGlzIChiYXNpY2FsbHkgdmVydGljYWwgYWxpZ24gZm9yIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZ3JpZCkuIFZhbHVlczogYHN0cmV0Y2hgLCBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiZXR3ZWVuYCwgYGFyb3VuZGBcbi8vLyBAcGFyYW1ldGVyIHtib29sZWFufSAkbWFyZ2luLWFkanVzdCBbdHJ1ZV0gLSBXaGV0aGVyIHRoZSBncmlkIHNob3VsZCBhZGp1c3QgdGhlIG91dGVyIG1hcmdpbiB0byBhbGxvdyBpdCB0byBhbGlnbiB3aXRoIG5vbi1ncmlkIGNvbnRlbnQuIFZhbHVlczogYHRydWVgLCBgZmFsc2VgXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRzZWN0aW9uIHtcbi8vL1x0XHRcdEBpbmNsdWRlIGdyaWQ7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBncmlkKCR0eXBlOiByb3csICRkaXJlY3Rpb246IGZvcndhcmQsICR3cmFwOiB3cmFwLCAkanVzdGlmeTogc3RhcnQsICRhbGlnbi1pdGVtczogc3RyZXRjaCwgJGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2gsICRtYXJnaW4tYWRqdXN0OiB0cnVlKSB7XG5cdEBpbmNsdWRlIGdyaWQtdHlwZSgkdHlwZSwgJGRpcmVjdGlvbik7XG5cdEBpbmNsdWRlIGdyaWQtd3JhcCgkd3JhcCk7XG5cdEBpbmNsdWRlIGdyaWQtanVzdGlmeSgkanVzdGlmeSk7XHRcblx0QGluY2x1ZGUgZ3JpZC1hbGlnbi1pdGVtcygkYWxpZ24taXRlbXMpO1xuXHRAaW5jbHVkZSBncmlkLWFsaWduLWNvbnRlbnQoJGFsaWduLWNvbnRlbnQpO1xuXHRAaW5jbHVkZSBncmlkLW1hcmdpbi1hZGp1c3QoJHR5cGUsICRtYXJnaW4tYWRqdXN0KTtcbn1cblxuLy8vXG4vLy8gU2V0IHRoZSBlbGVtZW50IGFzIGEgc3BlY2lmaWMgZ3JpZCB0eXBlIGFuZCBkaXJlY3Rpb25cbi8vL1xuLy8vIEBwYXJhbWV0ZXIge3N0cmluZ30gJHR5cGUgW3Jvd10gLSBUeXBlIG9mIGdyaWQuIFZhbHVlczogYHJvd2AsIGBjb2x1bW5gXG4vLy8gQHBhcmFtZXRlciB7c3RyaW5nfSAkZGlyZWN0aW9uIFtmb3J3YXJkXSAtIERpcmVjdGlvbiB0aGF0IHRoZSBncmlkIGl0ZW1zIHNob3VsZCBmb2xsb3cuIFZhbHVlczogYGZvcndhcmRgLCBgcmV2ZXJzZWBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdHNlY3Rpb24ge1xuLy8vXHRcdFx0QGluY2x1ZGUgZ3JpZC10eXBlKCR0eXBlOiByb3csICRkaXJlY3Rpb246IHJldmVyc2UpO1xuLy8vXHRcdH1cbi8vL1xuXG5AbWl4aW4gZ3JpZC10eXBlKCR0eXBlOiByb3csICRkaXJlY3Rpb246IGZvcndhcmQpIHtcblx0XG5cdGRpc3BsYXk6IGZsZXg7XG5cdFxuXHRAaWYgJHR5cGUgPT0gcm93IHtcblx0XG5cdFx0QGlmICRkaXJlY3Rpb24gPT0gZm9yd2FyZCB7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdH1cdFxuXHRcdEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gcmV2ZXJzZSB7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG5cdFx0fVx0XG5cdH1cblx0QGVsc2UgaWYgJHR5cGUgPT0gY29sdW1uIHtcblx0XHRcblx0XHRAaWYgJGRpcmVjdGlvbiA9PSBmb3J3YXJkIHtcblx0XHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0fVxuXHRcdEBlbHNlIGlmICRkaXJlY3Rpb24gPT0gcmV2ZXJzZSB7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XG5cdFx0fVxuXHR9XG59XG5cbi8vL1xuLy8vIFNldCBob3cgdGhlIGdyaWQgd2lsbCBkZWFsIHdpdGggY29udGVudCB0aGF0IGlzIGxvbmdlciB0aGFuIG9uZSBsaW5lXG4vLy9cbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICR3cmFwIFt3cmFwXSAtIFNob3VsZCB0aGUgY29udGVudCBiZSB3cmFwcGVkIG9yIG5vdC4gVmFsdWVzOiBgd3JhcGAsIGBuby13cmFwYCwgYHJldmVyc2VgXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRzZWN0aW9uIHtcbi8vL1x0XHRcdEBpbmNsdWRlIGdyaWQtd3JhcChuby13cmFwKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGdyaWQtd3JhcCgkd3JhcDogd3JhcCkge1xuXHRcblx0QGlmICR3cmFwID09IG5vLXdyYXAge1xuXHRcdGZsZXgtd3JhcDogbm93cmFwO1xuXHR9XG5cdEBpZiAkd3JhcCA9PSB3cmFwIHtcblx0XHRmbGV4LXdyYXA6IHdyYXA7XG5cdH1cblx0QGVsc2UgaWYgJHdyYXAgPT0gcmV2ZXJzZSB7XG5cdFx0ZmxleC13cmFwOiB3cmFwLXJldmVyc2U7XG5cdH1cbn1cblxuLy8vXG4vLy8gU2V0IGhvdyB0aGUgZ3JpZCB3aWxsIGp1c3RpZnkgY29udGVudCB3aGVuIHRoZXJlIGlzIHVudXNlZCBzcGFjZSBvbiBhIGxpbmVcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge3N0cmluZ30gJGp1c3RpZnkgW3N0YXJ0XSAtIEhvdyB0byBqdXN0aWZ5IHRoZSBjb2x1bW5zIHdpdGhpbiB0aGUgYXZhaWxhYmxlIHNwYWNlLiBWYWx1ZXM6IGBzdGFydGAsIGBlbmRgLCBgY2VudGVyYCwgYGJldHdlZW5gLCBgYXJvdW5kYFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0c2VjdGlvbiB7XG4vLy9cdFx0XHRAaW5jbHVkZSBncmlkLWp1c3RpZnkoY2VudGVyKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGdyaWQtanVzdGlmeSgkanVzdGlmeTogc3RhcnQpIHtcblx0XG5cdEBpZiAkanVzdGlmeSA9PSBzdGFydCB7XG5cdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXHR9XHRcblx0QGlmICRqdXN0aWZ5ID09IGVuZCB7XG5cdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0fVxuXHRAZWxzZSBpZiAkanVzdGlmeSA9PSBjZW50ZXIge1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHR9XG5cdEBlbHNlIGlmICRqdXN0aWZ5ID09IGJldHdlZW4ge1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0fVxuXHRAZWxzZSBpZiAkanVzdGlmeSA9PSBhcm91bmQge1xuXHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuXHR9XG59XG5cbi8vL1xuLy8vIFNldCBob3cgdGhlIGdyaWQgd2lsbCB2ZXJ0aWNhbGx5IGFsaWduIGNoaWxkIGVsZW1lbnRzIGJ5IGRlZmF1bHQgYW5kIGhvdyB0aGUgZW50aXJlIGdyaWQgY29udGVudCB2ZXJ0aWNhbGx5IGFsaWducyB3aGVuIHRoZXJlIGlzIGV4dHJhIHNwYWNlXG4vLy9cbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICRhbGlnbi1pdGVtcyBbc3RyZXRjaF0gLSBBbGlnbm1lbnQgbWV0aG9kIGZvciBjaGlsZCBjb2x1bW5zIG9uIHRoZSBjcm9zcyBheGlzIChiYXNpY2FsbHkgdmVydGljYWwgYWxpZ24gZm9yIGNoaWxkIGNvbHVtbnMpLiBWYWx1ZXM6IGBzdHJldGNoYCwgYHN0YXJ0YCwgYGVuZGAsIGBjZW50ZXJgLCBgYmFzZWxpbmVgXG4vLy8gQHBhcmFtZXRlciB7c3RyaW5nfSAkYWxpZ24tY29udGVudCBbc3RyZXRjaF0gLSBBbGlnbm1lbnQgbWV0aG9kIGZvciB0aGUgZ3JpZCBjb250ZW50IG9uIHRoZSBjcm9zcyBheGlzIChiYXNpY2FsbHkgdmVydGljYWwgYWxpZ24gZm9yIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZ3JpZCkuIFZhbHVlczogYHN0cmV0Y2hgLCBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiZXR3ZWVuYCwgYGFyb3VuZGBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdHNlY3Rpb24ge1xuLy8vXHRcdFx0QGluY2x1ZGUgZ3JpZC1hbGlnbihjZW50ZXIsIGNlbnRlcik7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBncmlkLWFsaWduKCRhbGlnbi1pdGVtczogc3RyZXRjaCwgJGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2gpIHtcdFxuXHRAaW5jbHVkZSBncmlkLWFsaWduLWl0ZW1zKCRhbGlnbi1pdGVtcyk7XG5cdEBpbmNsdWRlIGdyaWQtYWxpZ24tY29udGVudCgkYWxpZ24tY29udGVudCk7XG59XG5cdFxuLy8vXG4vLy8gU2V0IGhvdyB0aGUgZ3JpZCB3aWxsIHZlcnRpY2FsbHkgYWxpZ24gY2hpbGQgZWxlbWVudHMgYnkgZGVmYXVsdFxuLy8vXG4vLy8gQHBhcmFtZXRlciB7c3RyaW5nfSAkYWxpZ24gW3N0cmV0Y2hdIC0gQWxpZ25tZW50IG1ldGhvZCBmb3IgY2hpbGQgY29sdW1ucyBvbiB0aGUgY3Jvc3MgYXhpcyAoYmFzaWNhbGx5IHZlcnRpY2FsIGFsaWduIGZvciBjaGlsZCBjb2x1bW5zKS4gVmFsdWVzOiBgc3RyZXRjaGAsIGBzdGFydGAsIGBlbmRgLCBgY2VudGVyYCwgYGJhc2VsaW5lYFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0c2VjdGlvbiB7XG4vLy9cdFx0XHRAaW5jbHVkZSBncmlkLWFsaWduLWl0ZW1zKGVuZCk7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBncmlkLWFsaWduLWl0ZW1zKCRhbGlnbjogc3RyZXRjaCkge1xuXHRcblx0QGlmICRhbGlnbiA9PSBzdHJldGNoIHtcblx0XHRhbGlnbi1pdGVtczogc3RyZXRjaDtcblx0fVx0XG5cdEBlbHNlIGlmICRhbGlnbiA9PSBzdGFydCB7XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdH1cblx0QGVsc2UgaWYgJGFsaWduID09IGVuZCB7XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXHR9XG5cdEBlbHNlIGlmICRhbGlnbiA9PSBjZW50ZXIge1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdH1cblx0QGVsc2UgaWYgJGFsaWduID09IGJhc2VsaW5lIHtcblx0XHRhbGlnbi1pdGVtczogYmFzZWxpbmU7XG5cdH1cbn1cblxuLy8vXG4vLy8gU2V0IGhvdyB0aGUgZW50aXJlIGdyaWQgY29udGVudCB2ZXJ0aWNhbGx5IGFsaWducyB3aGVuIHRoZXJlIGlzIGV4dHJhIHNwYWNlXG4vLy9cbi8vLyBAcGFyYW1ldGVyIHtzdHJpbmd9ICRhbGlnbiBbc3RyZXRjaF0gLSBBbGlnbm1lbnQgbWV0aG9kIGZvciB0aGUgZ3JpZCBjb250ZW50IG9uIHRoZSBjcm9zcyBheGlzIChiYXNpY2FsbHkgdmVydGljYWwgYWxpZ24gZm9yIHRoZSBlbnRpcmUgY29udGVudCBvZiB0aGUgZ3JpZCkuIFZhbHVlczogYHN0cmV0Y2hgLCBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiZXR3ZWVuYCwgYGFyb3VuZGBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdHNlY3Rpb24ge1xuLy8vXHRcdFx0QGluY2x1ZGUgZ3JpZC1hbGlnbi1jb250ZW50KGNlbnRlcik7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBncmlkLWFsaWduLWNvbnRlbnQoJGFsaWduOiBzdHJldGNoKSB7XG5cdFxuXHRAaWYgJGFsaWduID09IHN0cmV0Y2gge1xuXHRcdGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2g7XG5cdH1cdFxuXHRAZWxzZSBpZiAkYWxpZ24gPT0gc3RhcnQge1xuXHRcdGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdH1cblx0QGVsc2UgaWYgJGFsaWduID09IGVuZCB7XG5cdFx0YWxpZ24tY29udGVudDogZmxleC1lbmQ7XG5cdH1cblx0QGVsc2UgaWYgJGFsaWduID09IGNlbnRlciB7XG5cdFx0YWxpZ24tY29udGVudDogY2VudGVyO1xuXHR9XG5cdEBlbHNlIGlmICRhbGlnbiA9PSBiZXR3ZWVuIHtcblx0XHRhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHR9XG5cdEBlbHNlIGlmICRhbGlnbiA9PSBhcm91bmQge1xuXHRcdGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcblx0fVxufVxuXG4vLy9cbi8vLyBTZXQgaG93IHRoZSBncmlkIGFkanVzdHMgdGhlIG1hcmdpbiB0byBhbGxvdyBpdCB0byBhbGlnbiB3aXRoIG5vbi1ncmlkIGNvbnRlbnRcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge2Jvb2xlYW59ICRtYXJnaW4tYWRqdXN0IFt0cnVlXSAtIFdoZXRoZXIgdGhlIGdyaWQgc2hvdWxkIGFkanVzdCB0aGUgb3V0ZXIgbWFyZ2luIHRvIGFsbG93IGl0IHRvIGFsaWduIHdpdGggbm9uLWdyaWQgY29udGVudC4gVmFsdWVzOiBgdHJ1ZWAsIGBmYWxzZWBcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdHNlY3Rpb24ge1xuLy8vXHRcdFx0QGluY2x1ZGUgZ3JpZC1tYXJnaW4tYWRqdXN0KCR0eXBlOiByb3csICRtYXJnaW4tYWRqdXN0OiBmYWxzZSk7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBncmlkLW1hcmdpbi1hZGp1c3QoJHR5cGU6IHJvdywgJG1hcmdpbi1hZGp1c3Q6IHRydWUpIHtcblx0XG5cdEBpZiAkbWFyZ2luLWFkanVzdCA9PSB0cnVlIHtcblx0XHRcblx0XHRAaWYgJHR5cGUgPT0gcm93IHtcblx0XHRcdG1hcmdpbi1yaWdodDogJGd1dHRlci13aWR0aCAqIC0wLjU7XG5cdFx0XHRtYXJnaW4tbGVmdDogJGd1dHRlci13aWR0aCAqIC0wLjU7XG5cdFx0fVxuXHRcdC8vL1RPRE86IE5PVCBTVVJFIElGIFRISVMgU0hPVUxEIEJFIEEgVEhJTkcgT1IgTk9ULCBQRVJIQVBTIFRISVMgT1BUSU9OIElTTlQgUkVMRVZBTlQgVE8gQ09MVU1OIEdSSURTIFNJTkNFIFRIRVJFIElTIE5PIFRPUC9CT1RUT00gTUFSR0lOIE9OIFRIRSBDT05UQUlORVJcblx0XHQvL0BlbHNlIGlmICR0eXBlID09IGNvbHVtbiB7XG5cdFx0Ly9cdG1hcmdpbi10b3A6ICRndXR0ZXItd2lkdGggKiAtMC41O1xuXHRcdC8vXHRtYXJnaW4tYm90dG9tOiAkZ3V0dGVyLXdpZHRoICogLTAuNTtcblx0XHQvL31cblx0fVxufVxuXG4vLy9cbi8vLyBTZXQgdGhlIG51bWJlciBvZiBjb2x1bW5zIGFuIGVsZW1lbnQgc3BhbnMgb24gdGhlIGdyaWQgYW5kIG90aGVyIGJlaGF2aW9ycyBzdWNoIGFzIHByZWZpeCwgc3VmZml4LCBncm93LCBzaHJpbmssIGFsaWduLCBhbmQgb3JkZXJcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcnxzdHJpbmd9ICRjb2xzIFthdXRvXSAtIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzaG91bGQgc3Bhbi4gVmFsdWVzOiBgYXV0b2AsIGBtYXhgLCBgI2Bcbi8vLyBAcGFyYW1ldGVyIHtudW1iZXJ9ICRwcmVmaXggWzBdIC0gVGhlIG51bWJlciBvZiBjb2x1bW5zIHRoYXQgc2hvdWxkIHByZWZpeCB0aGUgZWxlbWVudFxuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJHN1ZmZpeCBbMF0gLSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhhdCBzaG91bGQgc3VmZml4IHRoZSBlbGVtZW50XG4vLy8gQHBhcmFtZXRlciB7Ym9vbGVhbnxudW1iZXJ9ICRncm93IFtmYWxzZV0gLSBXaGV0aGVyIHRoZSBjb2x1bW4gc2hvdWxkIGdyb3cgb3Igbm90IG9yIGJ5IHdoYXQgZmFjdG9yLiBWYWx1ZXM6IGB0cnVlYCwgYGZhbHNlYCwgYCNgXG4vLy8gQHBhcmFtZXRlciB7Ym9vbGVhbnxudW1iZXJ9ICRzaHJpbmsgW2ZhbHNlXSAtIFdoZXRoZXIgdGhlIGNvbHVtbiBzaG91bGQgc2hyaW5rIG9yIG5vdCBvciBieSB3aGF0IGZhY3Rvci4gVmFsdWVzOiBgdHJ1ZWAsIGBmYWxzZWAsIGAjYFxuLy8vIEBwYXJhbWV0ZXIge3N0cmluZ30gJGFsaWduIFthdXRvXSAtIEFsaWdubWVudCBtZXRob2QgZm9yIHRoZSBjb2x1bW4gb24gdGhlIGNyb3NzIGF4aXMgKGJhc2ljYWxseSB2ZXJ0aWNhbCBhbGlnbikuIFZhbHVlczogYGF1dG9gLCBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiYXNlbGluZWAsIGBzdHJldGNoYFxuLy8vIEBwYXJhbWV0ZXIge2Jvb2xlYW59ICRvcmRlciBbMF0gLSBPcmRlciB0byBhcHBseSB0byB0aGUgY29sdW1uIG9yZGVyLlxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0ZGl2IHtcbi8vL1x0XHRcdEBpbmNsdWRlIGNvbHVtbjtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNvbHVtbigkY29sczogYXV0bywgJHByZWZpeDogMCwgJHN1ZmZpeDogMCwgJGdyb3c6IGZhbHNlLCAkc2hyaW5rOiBmYWxzZSwgJGFsaWduOiBhdXRvLCAkb3JkZXI6IDApIHtcblx0XG5cdC8vXG5cdC8vIGZvcmNlIGdyb3cgYW5kIHNocmluayB0byB0cnVlIGlmIGEgc2NhbGluZyBudW1iZXIgaXNudCBwcm92aWRlZCAoJGNvbHM6IG1heC9hdXRvIGRvZXMgbm90IGFsbG93IGdyb3cvc2hyaW5rID09IDAvZmFsc2UpXG5cdC8vXG5cdFx0XG5cdEBpZiAkY29scyA9PSBtYXggb3IgJGNvbHMgPT0gYXV0byB7XG5cdFx0XG5cdFx0QGlmIHR5cGUtb2YoJGdyb3cpICE9IG51bWJlciBvciAkZ3JvdyA9PSAwIHtcblx0XHRcdCRncm93OiB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRAaWYgdHlwZS1vZigkc2hyaW5rKSAhPSBudW1iZXIgb3IgJHNocmluayA9PSAwIHtcblx0XHRcdCRzaHJpbms6IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRAaW5jbHVkZSBjb2x1bW4tY29scygkY29scyk7XG5cdEBpbmNsdWRlIGNvbHVtbi1wcmVmaXgoJHByZWZpeCk7XG5cdEBpbmNsdWRlIGNvbHVtbi1zdWZmaXgoJHN1ZmZpeCk7XG5cdEBpbmNsdWRlIGNvbHVtbi1ncm93KCRncm93KTtcblx0QGluY2x1ZGUgY29sdW1uLXNocmluaygkc2hyaW5rKTtcblx0QGluY2x1ZGUgY29sdW1uLWFsaWduKCRhbGlnbik7XG5cdEBpbmNsdWRlIGNvbHVtbi1vcmRlcigkb3JkZXIpO1xufVxuXG4vLy9cbi8vLyBTZXQgdGhlIG51bWJlciBvZiBjb2x1bW5zIGFuIGVsZW1lbnQgc3BhbnMgb24gdGhlIGdyaWRcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcnxzdHJpbmd9ICRjb2xzIFthdXRvXSAtIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZWxlbWVudCBzaG91bGQgc3Bhbi4gVmFsdWVzOiBgYXV0b2AsIGBtYXhgLCBgI2Bcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdGRpdiB7XG4vLy9cdFx0XHRAaW5jbHVkZSBjb2x1bW4tY29scygyKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNvbHVtbi1jb2xzKCRjb2xzOiBhdXRvKSB7XG5cdFxuXHRAaWYgJGNvbHMgPT0gbWF4IHtcblx0XHRmbGV4LWJhc2lzOiAxMDAlO1xuXHR9XG5cdEBlbHNlIGlmICRjb2xzID09IGF1dG8ge1xuXHRcdGZsZXgtYmFzaXM6IGF1dG87XG5cdH1cblx0QGVsc2Uge1xuXHRcdGZsZXgtYmFzaXM6ICRjb2xzICogKCRjb2x1bW4td2lkdGggKyAkZ3V0dGVyLXdpZHRoKSAtICRndXR0ZXItd2lkdGg7XG5cdH1cbn1cblxuLy8vXG4vLy8gU2V0IHRoZSBudW1iZXIgb2YgZW1wdHkgY29sdW1ucyB0aGF0IHNob3VsZCBwcmVmaXggdGhlIGVsZW1lbnQgb24gdGhlIGdyaWRcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJHByZWZpeCBbMF0gLSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhhdCBzaG91bGQgcHJlZml4IHRoZSBlbGVtZW50XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRkaXYge1xuLy8vXHRcdFx0QGluY2x1ZGUgY29sdW1uLXByZWZpeCgyKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNvbHVtbi1wcmVmaXgoJGNvbHM6IDApIHtcblx0bWFyZ2luLWxlZnQ6ICgkY29scyAqICgkY29sdW1uLXdpZHRoICsgJGd1dHRlci13aWR0aCkpICsgKCRndXR0ZXItd2lkdGggLyAyKTtcbn1cblxuLy8vXG4vLy8gU2V0IHRoZSBudW1iZXIgb2YgZW1wdHkgY29sdW1ucyB0aGF0IHNob3VsZCBmb2xsb3cgdGhlIGVsZW1lbnQgb24gdGhlIGdyaWRcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJHN1ZmZpeCBbMF0gLSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhhdCBzaG91bGQgc3VmZml4IHRoZSBlbGVtZW50XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRkaXYge1xuLy8vXHRcdFx0QGluY2x1ZGUgY29sdW1uLXN1ZmZpeCgyKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNvbHVtbi1zdWZmaXgoJGNvbHM6IDApIHtcblx0bWFyZ2luLXJpZ2h0OiAoJGNvbHMgKiAoJGNvbHVtbi13aWR0aCArICRndXR0ZXItd2lkdGgpKSArICgkZ3V0dGVyLXdpZHRoIC8gMik7XG59XG5cbi8vL1xuLy8vIFNldCB0aGUgY29sdW1uIHRvIGF1dG9tYXRpY2FsbHkgZ3JvdyB3aGVuIHRoZXJlIGlzIGF2YWlsYWJsZSBzcGFjZVxuLy8vXG4vLy8gQHBhcmFtZXRlciB7Ym9vbGVhbnxudW1iZXJ9ICRncm93IFt0cnVlXSAtIFdoZXRoZXIgdGhlIGNvbHVtbiBzaG91bGQgZ3JvdyBvciBub3Qgb3IgYnkgd2hhdCBmYWN0b3IuIFZhbHVlczogYHRydWVgLCBgZmFsc2VgLCBgI2Bcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdGRpdiB7XG4vLy9cdFx0XHRAaW5jbHVkZSBjb2x1bW4tZ3JvdyhmYWxzZSk7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBjb2x1bW4tZ3JvdygkZ3JvdzogdHJ1ZSkge1xuXHRcblx0QGlmICRncm93ID09IHRydWUge1xuXHRcdGZsZXgtZ3JvdzogMTtcblx0fVxuXHRAZWxzZSBpZiAkZ3JvdyA9PSBmYWxzZSB7XG5cdFx0ZmxleC1ncm93OiAwO1xuXHR9XG5cdEBlbHNlIHtcblx0XHRmbGV4LWdyb3c6ICRncm93O1xuXHR9XG59XG5cbi8vL1xuLy8vIFNldCB0aGUgY29sdW1uIHRvIGF1dG9tYXRpY2FsbHkgc2hyaW5rIHdoZW4gdGhlcmUgaXMgbm90IGVub3VnaCBhdmFpbGFibGUgc3BhY2Vcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge2Jvb2xlYW58bnVtYmVyfSAkc2hyaW5rIFt0cnVlXSAtIFdoZXRoZXIgdGhlIGNvbHVtbiBzaG91bGQgc2hyaW5rIG9yIG5vdCBvciBieSB3aGF0IGZhY3Rvci4gVmFsdWVzOiBgdHJ1ZWAsIGBmYWxzZWAsIGAjYFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0ZGl2IHtcbi8vL1x0XHRcdEBpbmNsdWRlIGNvbHVtbi1zaHJpbmsoZmFsc2UpO1xuLy8vXHRcdH1cbi8vL1xuXG5AbWl4aW4gY29sdW1uLXNocmluaygkc2hyaW5rOiB0cnVlKSB7XG5cdFxuXHRAaWYgJHNocmluayA9PSB0cnVlIHtcblx0XHRmbGV4LXNocmluazogMTtcblx0fVxuXHRAZWxzZSBpZiAkc2hyaW5rID09IGZhbHNlIHtcblx0XHRmbGV4LXNocmluazogMDtcblx0fVxuXHRAZWxzZSB7XG5cdFx0ZmxleC1zaHJpbms6ICRzaHJpbms7XG5cdH1cbn1cblxuLy8vXG4vLy8gU2V0IHRoZSBhbGlnbm1lbnQgb24gdGhlIGNvbHVtbiwgdGhpcyB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGFsaWdubWVudCBvbiB0aGUgZ3JpZCBjb250YWluZXJcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge3N0cmluZ30gJGFsaWduIFthdXRvXSAtIEFsaWdubWVudCBtZXRob2QgZm9yIHRoZSBjb2x1bW4gb24gdGhlIGNyb3NzIGF4aXMgKGJhc2ljYWxseSB2ZXJ0aWNhbCBhbGlnbikuIFZhbHVlczogYGF1dG9gLCBgc3RhcnRgLCBgZW5kYCwgYGNlbnRlcmAsIGBiYXNlbGluZWAsIGBzdHJldGNoYFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0ZGl2IHtcbi8vL1x0XHRcdEBpbmNsdWRlIGNvbHVtbi1hbGlnbihjZW50ZXIpO1xuLy8vXHRcdH1cbi8vL1xuXG5AbWl4aW4gY29sdW1uLWFsaWduKCRhbGlnbjogYXV0bykge1xuXHRcblx0QGlmICRhbGlnbiA9PSBhdXRvIHtcblx0XHRhbGlnbi1zZWxmOiBhdXRvO1xuXHR9XG5cdEBlbHNlIGlmICRhbGlnbiA9PSBzdGFydCB7XG5cdFx0YWxpZ24tc2VsZjogZmxleC1zdGFydDtcblx0fVxuXHRAZWxzZSBpZiAkYWxpZ24gPT0gZW5kIHtcblx0XHRhbGlnbi1zZWxmOiBmbGV4LWVuZDtcblx0fVxuXHRAZWxzZSBpZiAkYWxpZ24gPT0gY2VudGVyIHtcblx0XHRhbGlnbi1zZWxmOiBjZW50ZXI7XG5cdH1cblx0QGVsc2UgaWYgJGFsaWduID09IGJhc2VsaW5lIHtcblx0XHRhbGlnbi1zZWxmOiBiYXNlbGluZTtcblx0fVxuXHRAZWxzZSBpZiAkYWxpZ24gPT0gc3RyZXRjaCB7XG5cdFx0YWxpZ24tc2VsZjogc3RyZXRjaDtcblx0fVxufVxuXG4vLy9cbi8vLyBTZXQgdGhlIG9yZGVyIG9mIHRoZSBjb2x1bW4gdG8gb3ZlcnJpZGUgdGhlIG5vcm1hbCBvcmRlcmluZ1xuLy8vXG4vLy8gQHBhcmFtZXRlciB7Ym9vbGVhbn0gJG9yZGVyIFswXSAtIE9yZGVyIHRvIGFwcGx5IHRvIHRoZSBjb2x1bW4gb3JkZXIuXG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRkaXYge1xuLy8vXHRcdFx0QGluY2x1ZGUgY29sdW1uLW9yZGVyKC0xKTtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNvbHVtbi1vcmRlcigkb3JkZXI6IDApIHtcblx0XG5cdC8vXG5cdC8vIGNzcyBkZWZhdWx0IGlzIDBcblx0Ly9cblx0XG5cdEBpZiAkb3JkZXIgIT0gMCB7XG5cdFx0b3JkZXI6ICRvcmRlcjtcblx0fVxufVxuXG4vLy9cbi8vLyBEZWZpbmUgdGhlIGZvbnQgc3R5bGVzIHRoYXQgcG9zaXRpb24gdGhlIGZvbnQgd2l0aGluIHRoZSB0eXBvZ3JhcGhpYyBncmlkXG4vLy9cbi8vLyBAcGFyYW1ldGVyIHtudW1iZXJ9ICRzaXplIC0gTnVtZXJpYyBmb250IHNpemUgaW4gdW5pdGxlc3MgZm9ybWF0XG4vLy9cbi8vLyBAZXhhbXBsZSBzY3NzIC0gVXNhZ2Vcbi8vL1x0XHRoMyB7XG4vLy9cdFx0XHRAaW5jbHVkZSBmb250LXNpemUoMik7XG4vLy9cdFx0fVxuLy8vXG5cbkBtaXhpbiBmb250LXNpemUoJHNpemUpIHtcblx0Zm9udC1zaXplOiAkc2l6ZSAqIDFlbTtcblx0bGluZS1oZWlnaHQ6IGxpbmUtaGVpZ2h0KCRzaXplKTtcblx0bWFyZ2luLXRvcDogJGxpbmUtaGVpZ2h0IC8gJHNpemUgKiAxZW07XG5cdG1hcmdpbi1ib3R0b206ICRsaW5lLWhlaWdodCAvICRzaXplICogMWVtO1xufVxuXG4vLy9cbi8vLyBDYWxjdWxhdGUgdGhlIGxpbmUgaGVpZ2h0IHRoYXQgd2lsbCBtYWludGFpbiB2ZXJ0aWNhbCByaHl0aG0gZm9yIHRoZSBmb250IHNpemVcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJHNpemUgLSBOdW1lcmljIGZvbnQgc2l6ZSBpbiB1bml0bGVzcyBmb3JtYXRcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdGgzIHtcbi8vL1x0XHRcdEBpbmNsdWRlIGxpbmUtaGVpZ2h0KDIpO1xuLy8vXHRcdH1cbi8vL1xuXG5AZnVuY3Rpb24gbGluZS1oZWlnaHQoJHNpemUpIHtcblx0JGxpbmVzLW5lZWRlZDogY2VpbCgkc2l6ZSAvICRsaW5lLWhlaWdodCk7XG5cblx0QHJldHVybiAoJGxpbmUtaGVpZ2h0IC8gJHNpemUgKiAkbGluZXMtbmVlZGVkKTtcbn1cblxuLy8vXG4vLy8gQ29udmVydCBQaXhlbHMgdG8gRW0gdW5pdHMgKHVuaXRsZXNzKVxuLy8vXG4vLy8gQHBhcmFtZXRlciB7bnVtYmVyfSAkcGl4ZWxzIC0gTnVtZXJpYyBudW1iZXIgb2YgcGl4ZWxzIGluIHVuaXRsZXNzIGZvcm1hdFxuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJGJhc2UgWyRiYXNlLWZvbnQtc2l6ZV0gLSBOdW1lcmljIGJhc2UgZm9udCBzaXplIGluIHVuaXRsZXNzIGZvcm1hdFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0c2VsZWN0IHtcbi8vL1x0XHRcdHBhZGRpbmctdG9wOiBlbSgyKSAqIDFlbTsgLy8gMC4xMjVlbVxuLy8vXHRcdH1cbi8vL1xuXG5AZnVuY3Rpb24gZW0oJHBpeGVscywgJGJhc2U6ICRiYXNlLWZvbnQtc2l6ZSkge1xuXHRAcmV0dXJuICRwaXhlbHMgLyAoJGJhc2UgKiAxNik7XG59XG5cbi8vL1xuLy8vIENvbnZlcnQgRW0gdW5pdHMgdG8gUGl4ZWxzICh1bml0bGVzcylcbi8vL1xuLy8vIEBwYXJhbWV0ZXIge251bWJlcn0gJGVtcyAtIE51bWVyaWMgbnVtYmVyIG9mIGVtcyBpbiB1bml0bGVzcyBmb3JtYXRcbi8vLyBAcGFyYW1ldGVyIHtudW1iZXJ9ICRiYXNlIFskYmFzZS1mb250LXNpemVdIC0gTnVtZXJpYyBiYXNlIGZvbnQgc2l6ZSBpbiB1bml0bGVzcyBmb3JtYXRcbi8vL1xuLy8vIEBleGFtcGxlIHNjc3MgLSBVc2FnZVxuLy8vXHRcdHNlbGVjdCB7XG4vLy9cdFx0XHRwYWRkaW5nLXRvcDogcHgoMC4xMjUpICogMXB4OyAvLyAycHhcbi8vL1x0XHR9XG4vLy9cblxuQGZ1bmN0aW9uIHB4KCRlbXMsICRiYXNlOiAkYmFzZS1mb250LXNpemUpIHtcblx0QHJldHVybiAkZW1zICogJGJhc2UgKiAxNjtcbn1cblxuLy8vXG4vLy8gQ2xlYXIgYW55IGNoaWxkcmVuIHdpdGhpbiB0aGUgZWxlbWVudFxuLy8vXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFVzYWdlXG4vLy9cdFx0c2VjdGlvbiB7XG4vLy9cdFx0XHRAaW5jbHVkZSBjbGVhci1jaGlsZHJlbjtcbi8vL1x0XHR9XG4vLy9cblxuQG1peGluIGNsZWFyLWNoaWxkcmVuKCkge1xuXHQmOmFmdGVyIHtcblx0XHRjb250ZW50OiBcIlwiO1xuXHRcdGRpc3BsYXk6IHRhYmxlO1xuXHRcdGNsZWFyOiBib3RoO1xuXHR9XG59IiwiLy8vL1xuLy8vXG4vLy8gR3JpZCBkZWZhdWx0IHZhcmlhYmxlc1xuLy8vXG4vLy8gQGdyb3VwIGdyaWRcbi8vLyBAYXV0aG9yIENsaW50IEtvbG9kemllalxuLy8vXG4vLy8vXG5cbi8vL1xuLy8vIFdpZHRoIG9mIHRoZSBjb2x1bW4gaXRlbXNcbi8vL1xuLy8vIEB0eXBlIG51bWJlclxuLy8vXG5cbiRjb2x1bW4td2lkdGg6IDMuNXJlbSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gV2lkdGggb2YgdGhlIGd1dHRlciBvbiBjb2x1bW4gaXRlbXNcbi8vL1xuLy8vIEB0eXBlIG51bWJlclxuLy8vXG5cbiRndXR0ZXItd2lkdGg6IDEuNXJlbSAhZGVmYXVsdDtcblxuLy8vXG4vLy8gQmFzZSBmb250IHNpemUgdG8gYmUgdXNlZCBpbiBncmlkIGNhbGN1bGF0aW9uc1xuLy8vXG4vLy8gQHR5cGUgbnVtYmVyXG4vLy9cblxuJGJhc2UtZm9udC1zaXplOiAxICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBMaW5lIGhlaWdodCB0byBiZSB1c2VkIGJ5IGRlZmF1bHQgZm9yIGJvZHkgdGV4dFxuLy8vXG4vLy8gQHR5cGUgbnVtYmVyXG4vLy9cblxuJGxpbmUtaGVpZ2h0OiAgMS42MjUgIWRlZmF1bHQ7XG5cbi8vL1xuLy8vIEJyZWFrcG9pbnRzIHRoYXQgYXJlIHVzZWQgd2l0aCB0aGUgY29udGFpbmVyIGFuZCBicmVha3BvaW50IG1peGluc1xuLy8vXG4vLy8gQHR5cGUgbWFwXG4vLy9cblxuJGJyZWFrcG9pbnRzOiAoXG5cdGRlZmF1bHQ6IDQsXG5cdHNtYWxsOiA2LFxuXHRtZWRpdW06IDgsXG5cdGxhcmdlOiAxMixcblx0ZXh0cmEtbGFyZ2U6IDE2XG4pICFkZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBT0EsQUFFSSxhQUZTLENBRVQsRUFBRSxDQUFDO0VBQ0MsVUFBVSxFQUFFLElBQUs7RUFDakIsTUFBTSxFQUFFLENBQUU7RUFDVixPQUFPLEVBQUUsQ0FBRTtFSXdGbEIsT0FBTyxFQUFFLElBQUs7RUFjWixjQUFjLEVBQUUsTUFBTztFQXNCeEIsU0FBUyxFQUFFLE1BQU87RUF3QmxCLGVBQWUsRUFBRSxVQUFXO0VBK0M1QixXQUFXLEVBQUUsT0FBUTtFQThCckIsYUFBYSxFQUFFLE9BQVE7Q0ovTXBCOztBQXZCTCxBQVFRLGFBUkssQ0FFVCxFQUFFLENBTUUsRUFBRSxDQUFDO0VJd1VULFVBQVUsRUFBRSxJQUFLO0VBbUJsQixXQUFXLEVBQUcsT0FBSztFQWVuQixZQUFZLEVBQUcsT0FBSztFQWlCbkIsU0FBUyxFQUFFLENBQUU7RUF3QmIsV0FBVyxFQUFFLENBQUU7RUF3QmYsVUFBVSxFQUFFLElBQUs7Q0pqYVY7O0FBbEJULEFBV1ksYUFYQyxDQUVULEVBQUUsQ0FNRSxFQUFFLENBR0UsRUFBRSxDQUFDO0VBQ0MsYUFBYSxFQUFFLENBQUU7Q0FDcEI7O0FBYmIsQUFlWSxhQWZDLENBRVQsRUFBRSxDQU1FLEVBQUUsQ0FPRSxDQUFDLENBQUM7RUFDRSxVQUFVLEVBQUUsQ0FBRTtDQUNqQjs7QUkrQlosTUFBTSxDQUFOLE1BQU0sTUFBTSxTQUFTLEVBQUUsT0FBTztFSmhEL0IsQUFFSSxhQUZTLENBRVQsRUFBRSxDQUFDO0lJMkZOLE9BQU8sRUFBRSxJQUFLO0lBS1osY0FBYyxFQUFFLEdBQUk7R0ozRWxCOzs7QUFPTCxBQUFBLE1BQU0sQ0FBQztFQUNILGdCQUFnQixFQUFFLE9BQVE7RUFDMUIsS0FBSyxFQUFFLElBQUs7Q0ErQmY7O0FBakNELEFBSUksTUFKRSxDQUlGLEVBQUUsQ0FBQztFQUNDLFVBQVUsRUFBRSxJQUFLO0VBQ2pCLE1BQU0sRUFBRSxPQUFZLENBQU8sQ0FBQztFQUM1QixPQUFPLEVBQUUsQ0FBRTtFSXdEbEIsT0FBTyxFQUFFLElBQUs7RUFLWixjQUFjLEVBQUUsR0FBSTtFQWtDckIsU0FBUyxFQUFFLElBQUs7RUFxQmhCLGVBQWUsRUFBRSxVQUFXO0VBd0Q1QixXQUFXLEVBQUUsTUFBTztFQXFCcEIsYUFBYSxFQUFFLE9BQVE7RUFtQ3RCLFlBQVksRUFBRSxRQUFhO0VBQzNCLFdBQVcsRUFBRSxRQUFhO0NKNU14Qjs7QUFoQ0wsQUFVUSxNQVZGLENBSUYsRUFBRSxDQU1FLEVBQUUsQ0FBQztFQUNDLFFBQVEsRUFBRSxRQUFTO0VBQ25CLFVBQVUsRUFBRSxPQUFZO0VJc1NsQyxVQUFVLEVBQUUsSUFBSztFQW1CbEIsV0FBVyxFQUFHLE9BQUs7RUFlbkIsWUFBWSxFQUFHLE9BQUs7RUFpQm5CLFNBQVMsRUFBRSxDQUFFO0VBd0JiLFdBQVcsRUFBRSxDQUFFO0VBd0JmLFVBQVUsRUFBRSxJQUFLO0NKdFhWOztBQS9CVCxBQWVZLE1BZk4sQ0FJRixFQUFFLENBTUUsRUFBRSxDQUtFLEdBQUcsQ0FBQztFQUNBLEtBQUssRUFBRSxHQUFJO0VBQ1gsT0FBTyxFQUFFLEVBQUc7Q0FhZjs7QUlaWixNQUFNLENBQU4sTUFBTSxNQUFNLFNBQVMsRUFBRSxPQUFPO0VKbEIvQixBQWVZLE1BZk4sQ0FJRixFQUFFLENBTUUsRUFBRSxDQUtFLEdBQUcsQ0FBQztJQUtJLEtBQUssRUFBRSxHQUFJO0dBVWxCOzs7QUlaWixNQUFNLENBQU4sTUFBTSxNQUFNLFNBQVMsRUFBRSxPQUFPO0VKbEIvQixBQWVZLE1BZk4sQ0FJRixFQUFFLENBTUUsRUFBRSxDQUtFLEdBQUcsQ0FBQztJQVNJLEtBQUssRUFBRSxHQUFJO0dBTWxCOzs7QUlaWixNQUFNLENBQU4sTUFBTSxNQUFNLFNBQVMsRUFBRSxPQUFPO0VKbEIvQixBQWVZLE1BZk4sQ0FJRixFQUFFLENBTUUsRUFBRSxDQUtFLEdBQUcsQ0FBQztJQWFJLEtBQUssRUFBRSxHQUFJO0dBRWxCIiwibmFtZXMiOltdfQ== */
