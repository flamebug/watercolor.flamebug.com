section#error {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: relative;
  height: 100vh;
  padding: 0;
  background-color: #ea9462;
  color: #fff;
  text-align: center;
}
section#error .container {
  -webkit-animation-name: slide-in;
          animation-name: slide-in;
  -webkit-animation-duration: 1s;
          animation-duration: 1s;
  -webkit-animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
          animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);
}
section#error img {
  display: block;
  width: 200px;
  margin: 1.625em auto;
  opacity: .1;
}
section#error h1 {
  line-height: 1.1;
  letter-spacing: -2px;
  color: inherit;
  -webkit-flex-basis: 100%;
      -ms-flex-preferred-size: 100%;
          flex-basis: 100%;
  margin-left: 0.75rem;
  margin-right: 0.75rem;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
  -webkit-flex-shrink: 1;
      -ms-flex-negative: 1;
          flex-shrink: 1;
  -webkit-align-self: auto;
      -ms-flex-item-align: auto;
          align-self: auto;
}
section#error h1 small {
  display: block;
  font-size: .5em;
  letter-spacing: 0;
  opacity: .5;
}

/* Standard syntax */
@-webkit-keyframes slide-in {
  from {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
            transform: translate(0, -100%);
  }
  to {
    opacity: 1;
    -webkit-transform: translate(0, 0);
            transform: translate(0, 0);
  }
}
@keyframes slide-in {
  from {
    opacity: 0;
    -webkit-transform: translate(0, -100%);
            transform: translate(0, -100%);
  }
  to {
    opacity: 1;
    -webkit-transform: translate(0, 0);
            transform: translate(0, 0);
  }
}



/*# sourceMappingURL=data:application/json;base64, */